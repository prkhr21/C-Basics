
DRY principle - DO not REPEAT YOURSELF. 

                            Public derivation   Protected derivation    Private derivation
1. Public members -             Public              Protected               Private      
2. Protected members -          Protected           Protected               Private
3. Private members -            Not inherited       Not inherited           Not inherited 

----------------------------------------------------------------------------------------------

"this" is a keyword which is a pointer which points to the object which invokes the member function.

----------------------------------------------------------------------------------------------

Virtual function - 

1. They can not be static.
2. They are accessed by object pointers.
3. Virtual function can be friend of another class.
4. A virtual function in base class might not be used.
5. If a virtual function is defined in base class then there is no necessity of redefining it 
   in derived class.

----------------------------------------------------------------------------------------------

Abstract base class - It is class which is used to derive other classes, this class can not be 
                      used to create objects.

----------------------------------------------------------------------------------------------

File input / output - 

The useful class for working withfiles in c++ are : 

1. fstreambase
2. ofstream ----> derived from fstreambase
3. instream ----> derived from fstreambase

In order to work with files in c++, you will have to open it. Primarily, there are 2 ways to 
open a file - 

1. using the constructor.
2. using the member function open() of the class.

getline() - it is used to read one complete line from a file. consecutive use give s next line.

---------------------------------------------------------------------------------------------

Templates - It is a blueprint or formula for creating a generic class or function.
            To simply put you can create a single function or single class to work with 
            different data types.

Templates & STL are must for competetive programming.

Syntax -    template<class T1, class T2...(Comma seprated)>
            class name_of_class
            {
               //Body of class.
            };

            int main()
            {
               name_of_class<T1, T2...> obj_name;
            }

            In main function call you will write respective data types in place of T1, T2...

Template with default parameter - if data type is not specified then it will take 
                                  default datatype.

syntax -    template<class T1 = datatype1, class T2 = datatype2...>
            class name_of_class
            {
               class body;
            };

            int main()
            {
               name_of_class< > obj_name;
               return 0;
            }

STL - STL stands for "Standard Template Library". It is library of well tested generic classes
      & functions.

Components of STL - 1. Containers - Stores data ex - Vector, List etc. It uses Template classes.
                                    It is of 3 types - 
                                    
                                    a. Sequence containers - Linear faishon
                                                             ex - vector, list, dequeue.

                                    b. Associative containers - Direct access
                                                                ex - set, multiset, map, multimap.

                                    c. Derived containers - Real world modeling
                                                            ex - stack, queue, priority queue.
                    
                    2. Algorithms - Algo for Sorting, Searching. It uses Template function.
                    
                    3. Iterators - It is an object which points to an element in a container.
                                   Handled just like pointers. It connects Algo with Containers.

STL is used because its good idea not to "reinvent the wheel".